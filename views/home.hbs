
<!doctype html>

<html lang="en"></html>
<head>
<meta charset="utf-8">

<head>   
<title>The HTML5 Herald</title>
<meta name="description" content="Home Page">
<meta name="author" content="ahmed hamad"

<link rel="stylesheet" href="/css/main.css">
</head>
<body> 
<h1>Home page </h1>

<hr> 

<h2>Cars list</h2>
{{!-- {{#each car}}
<li>For details :<a href="/detail?model={{model}}">{{model}} </a> </li>
{{/each}} --}}

{{!--  root is for React  use  --}}

<div id="root"></div> 

<script type="text/babel">

// return a lis of cars
const Cars = (props) => {

const listItems = props.data.map((item) =>
<li 
key={item._id} id={item._id} onClick={props.clickHandler}>

  {item.model} 

</li>);
return <ul>  {listItems}  </ul>
}

const ItemDetail = (props) => {
      return(  <div>
          <hr />
          <h3>  Car Details </h3>

        <form >
            model :<input type="text" name="model" value= {props.item.model || ""} onChange={props.handleInputChange} required maxLength="100"/>
            make :<input type="text" name="make" value= {props.item.make || ""} onChange={props.handleInputChange} required maxLength="100"/>

            year: <input type="number"name="year" value= {props.item.year|| ""} onChange={props.handleInputChange} required maxLength="100"/>

            vin: <input type="number" name="vin" value ={props.item.vin|| ""} onChange={props.handleInputChange} required maxLength="100"/>
            type: <input type="text" name="type" value={props.item.type|| ""} onChange={props.handleInputChange} required maxLength="100"/>
          
        </form>
              <button name="clear" onClick= {props.clearForm }>Clear</button>

          <button onClick={props.delete}>Delete</button>

          <button onClick={props.save}>Save</button>
          <button onClick={props.reset}>Reset</button>

      

        </div>
      )
    }

// reater carsapp (componetns) and constructur method 
class CarsApp extends React.Component {
  constructor(props) {
  super(props);
  this.state = {
  items: {{{car}}}, 
  currentItem: {}
};
  this.selectItem = this.selectItem.bind(this);
  this.handleInputChange = this.handleInputChange.bind(this);
  this.clearForm = this.clearForm.bind(this);
  
  this.onSave = this.onSave.bind(this);
  this.onChange = this.onChange.bind(this);
   this.onDelete = this.onDelete.bind(this);
}

// click event handler + function 
selectItem = (event) => {
  // <a href={"/detail?title="+item.title}>
  console.log(event.target.innerText)
  const found = this.state.items.find((item) => {
    return item.model === event.target.innerText;
});
  this.setState({currentItem:found})
}


 // create a newitem then update it with the new item , then updateint the applicton state with selected a new item 
handleInputChange = (event) => {
  let newItem = this.state.currentItem;
  newItem[event.target.name] = event.target.value;
  this.setState({currentItem: newItem})
}

// Handle item save
onSave() {
  let newItem = this.state.currentItem;
  if (!newItem.model) {
    return;
  }
}
 fetch("/api/v1/add/", { method: "POST",
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newItem)
      }).then(res => res.json())
        .then((json) => {
        let newData;
        if (!newItem._id) { // add new item to array
          newData = this.state.items;
          newItem._id = json._id;
          newData.push(newItem);
        } else { // update existing item 
          newData = this.state.items.map((item) => {
            if (item._id === newItem._id) {
              item = newItem; 
            }
            return item;
          });          
        }

        // Update state with new array
        this.setState({items: newData});
      });
    }
    



 onChange(event) {
        var newItem = this.state.currentItem;
        newItem[event.target.name] = event.target.value
        this.setState({currentItem: newItem});
      }


clearForm = () =>{
    this.setState({currentItem: {} })
}



onDelete(){
        let id = this.state.currentItem._id;
        
        fetch("/api/v1/delete/" + id).then((response) => {
          return response.json();
        }).then((results) => {
          // Filter all items except the one to be removed
          const remainder = this.state.items.filter((item) => {
            return item._id !== id;
        });
          // Update state with new array
          this.setState({items: remainder, currentItem: {} });
        });
      }




render() {
  return(
  <div>
    <h2>Inventory</h2>  

    <Cars data={this.state.items} clickHandler={this.selectItem} />

    < ItemDetail
       item={this.state.currentItem}
    
      handleInputChange ={this.handleInputChange}
      clearForm={this.clearForm}
      onSave={this.onSave}
      onChange={this.onChange}
      reset={this.onClear}
      delete={this.onDelete}/>

  </div> 
);
}
}
ReactDOM.render( < CarsApp />,document.getElementById('root') );
// crate a rdnder commands to render some React 



</script>
</body>
</html> 

